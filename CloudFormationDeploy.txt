AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Stack para despliegue del proyecto Funds:
  - Frontend: S3 + CloudFront
  - Backend: ECR + CodeBuild (build & push) + ECS Fargate + ALB
  Region: us-east-1

Parameters:
  AllowedCidr:
    Type: String
    Default: "0.0.0.0/0"
    Description: "CIDR allowed to access the ALB (default: public). Change for security."
  EnvName:
    Type: String
    Default: "prod"
    Description: "Environment name (used in resource names)."

Mappings:
  AZMap:
    us-east-1:
      AZ1: "us-east-1a"
      AZ2: "us-east-1b"

Resources:

  # ---------------------------
  # Basic Networking (VPC)
  # ---------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub funds-vpc-${EnvName}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub funds-igw-${EnvName}

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !FindInMap [ AZMap, !Ref "AWS::Region", AZ1 ]
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: !Sub funds-public-1-${EnvName} }]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !FindInMap [ AZMap, !Ref "AWS::Region", AZ2 ]
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: !Sub funds-public-2-${EnvName} }]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !FindInMap [ AZMap, !Ref "AWS::Region", AZ1 ]
      MapPublicIpOnLaunch: false
      Tags: [{ Key: Name, Value: !Sub funds-private-1-${EnvName} }]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !FindInMap [ AZMap, !Ref "AWS::Region", AZ2 ]
      MapPublicIpOnLaunch: false
      Tags: [{ Key: Name, Value: !Sub funds-private-2-${EnvName} }]

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [{ Key: Name, Value: !Sub funds-public-rt-${EnvName} }]

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # ---------------------------
  # Security Groups
  # ---------------------------
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AllowedCidr
      Tags: [{ Key: Name, Value: !Sub funds-alb-sg-${EnvName} }]

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Tasks SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref AlbSecurityGroup
      Tags: [{ Key: Name, Value: !Sub funds-ecs-sg-${EnvName} }]

  # ---------------------------
  # ECR Repository
  # ---------------------------
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub funds-backend-${EnvName}
      ImageScanningConfiguration:
        scanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "expire untagged images",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "imageCountMoreThan",
                  "countNumber": 5
                },
                "action": { "type": "expire" }
              }
            ]
          }

  # ---------------------------
  # IAM Roles
  # ---------------------------
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub funds-codebuild-role-${EnvName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:PutImage
                  - ecr:DescribeRepositories
                  - ecr:CreateRepository
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - ecs:DescribeTaskDefinition
                  - ecs:RegisterTaskDefinition
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: "*"

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub funds-ecs-service-role-${EnvName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub funds-ecs-exec-role-${EnvName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # ---------------------------
  # ECS Cluster, Task Definition, Service
  # ---------------------------
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub funds-cluster-${EnvName}

  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub funds-backend-task-${EnvName}
      Cpu: "512"
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: backend
          Image: !Sub "${ECRRepository.RepositoryUri}:latest"
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          Essential: true
          Environment:
            - Name: ENV
              Value: !Ref EnvName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub /ecs/funds/${EnvName}
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs

  BackendService:
    Type: AWS::ECS::Service
    DependsOn: BackendListener
    Properties:
      ServiceName: !Sub funds-backend-service-${EnvName}
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref BackendTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: backend
          ContainerPort: 8000
          TargetGroupArn: !Ref BackendTargetGroup
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50

  # ---------------------------
  # ALB + Target Group + Listener
  # ---------------------------
  BackendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub funds-alb-${EnvName}
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Scheme: internet-facing
      Type: application

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub funds-backend-tg-${EnvName}
      Port: 8000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckPath: /docs
      HealthCheckIntervalSeconds: 30

  BackendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
      LoadBalancerArn: !Ref BackendLoadBalancer
      Port: 80
      Protocol: HTTP

  # ---------------------------
  # S3 bucket for frontend + CloudFront
  # ---------------------------
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub funds-frontend-${AWS::AccountId}-${EnvName}
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Sub ${FrontendBucket.Arn}/*

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "OAI for funds front ${EnvName}"

  FrontendDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - Id: !Sub fundsS3Origin-${EnvName}
            DomainName: !GetAtt FrontendBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        DefaultCacheBehavior:
          TargetOriginId: !Sub fundsS3Origin-${EnvName}
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        DefaultRootObject: index.html
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  # ---------------------------
  # CodeBuild project (build backend docker -> ECR -> update ECS)
  # ---------------------------
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub funds-backend-build-${EnvName}
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        PrivilegedMode: true
        Image: aws/codebuild/standard:6.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: ECR_REPO_URI
            Value: !GetAtt ECRRepository.RepositoryUri
          - Name: ECS_CLUSTER
            Value: !Ref ECSCluster
          - Name: ECS_SERVICE
            Value: !Ref BackendService
          - Name: ENV_NAME
            Value: !Ref EnvName
      Source:
        Type: S3
        Location: !Sub ${SourceBucketNamePlaceholder}/${SourceObjectKeyPlaceholder}
        BuildSpec: |
          version: 0.2

          env:
            variables:
              IMAGE_TAG: "latest"

          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws --version
                - $(aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPO_URI)
                - REPO_URI=$ECR_REPO_URI
                - echo REPO_URI=$REPO_URI
            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build -t $REPO_URI:$IMAGE_TAG .
                - docker tag $REPO_URI:$IMAGE_TAG $REPO_URI:$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
            post_build:
              commands:
                - echo Pushing the Docker image...
                - docker push $REPO_URI:$IMAGE_TAG
                - docker push $REPO_URI:$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
                - echo Updating ECS service to use new image (forcing new deployment)...
                - aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
          cache:
            paths:
              - '/root/.cache/pip/**/*'

  # ---------------------------
  # SSM Parameter Store placeholders (for backend env)
  # ---------------------------
  SSM_DB_HOST:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/funds/${EnvName}/DB_HOST"
      Type: String
      Value: "CHANGE_ME"
      Description: "Database host - replace after stack creation"

  SSM_DB_PASSWORD:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/funds/${EnvName}/DB_PASSWORD"
      Type: String
      Value: "CHANGE_ME"
      Description: "Database password - replace after stack creation"

  # ---------------------------
  # CloudWatch Log Group for ECS
  # ---------------------------
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/funds/${EnvName}
      RetentionInDays: 14

Outputs:
  FrontendBucketName:
    Description: "S3 bucket to upload frontend build"
    Value: !Ref FrontendBucket

  FrontendUrl:
    Description: "CloudFront distribution domain for frontend"
    Value: !GetAtt FrontendDistribution.DomainName

  ECRRepositoryUri:
    Description: "ECR repository URI"
    Value: !GetAtt ECRRepository.RepositoryUri

  ALBDNS:
    Description: "ALB DNS for backend"
    Value: !GetAtt BackendLoadBalancer.DNSName

  ECSClusterName:
    Description: "ECS Cluster"
    Value: !Ref ECSCluster

  CodeBuildProjectName:
    Description: "CodeBuild project to build backend image"
    Value: !Ref CodeBuildProject
